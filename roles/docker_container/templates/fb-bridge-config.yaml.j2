homeserver:
    address: http://synapse:8008
    domain: {{ cloud_server_fqdn }}
    verify_ssl: false
    asmux: false
    http_retry_count: 4
    status_endpoint:
    message_send_checkpoint_endpoint:
    async_media: false

# Changing these values requires regeneration of the registration.
appservice:
    address: http://fb-bridge:29319
    hostname: 0.0.0.0
    port: 29319
    max_body_size: 1
    database: postgres://mautrix_facebook:{{ fb_bridge_db_pswd }}@postgres/mautrix_facebook
    database_opts:
        min_size: 5
        max_size: 10
    public:
        enabled: false
        prefix: /public
        external: https://example.com/public
        shared_secret: {{ fb_bridge_shared_secret }}
        allow_matrix_login: true
        segment_key:

    id: facebook
    bot_username: facebookbot
    bot_displayname: Facebook bridge bot
    bot_avatar: mxc://maunium.net/ygtkteZsXnGJLJHRchUwYWak

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: true

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: {{ fb_bridge_as_token }} 
    hs_token: {{ fb_bridge_hs_token }} 

metrics:
    enabled: false
    listen_port: 8000

manhole:
    enabled: true
    path: /var/tmp/fb-bridge.manhole
    # The list of UIDs who can be added to the whitelist.
    # If empty, any UIDs can be specified in the open-manhole command.
    whitelist:
    - 0
bridge:
    # Localpart template of MXIDs for Facebook users.
    # {userid} is replaced with the user ID of the Facebook user.
    username_template: facebook_{userid}
    # Displayname template for Facebook users.
    # {displayname} is replaced with the display name of the Facebook user
    #               as defined below in displayname_preference.
    # Keys available for displayname_preference are also available here.
    displayname_template: '{displayname} (FB)'
    # Available keys:
    # "name" (full name)
    # "first_name"
    # "last_name"
    # "nickname"
    # "own_nickname" (user-specific!)
    displayname_preference:
    - name
    - first_name
    command_prefix: '!fb'

    initial_chat_sync: 10
    # Whether or not the Facebook users of logged in Matrix users should be
    # invited to private chats when the user sends a message from another client.
    invite_own_puppet_to_pm: false
    # Whether or not to use /sync to get presence, read receipts and typing notifications
    # when double puppeting is enabled
    sync_with_custom_puppets: false
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Servers to always allow double puppeting from
    double_puppet_server_map:
        example.com: https://example.com
    double_puppet_allow_discovery: false
    # Shared secrets for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    # If using this for other servers than the bridge's server,
    # you must also set the URL in the double_puppet_server_map.
    login_shared_secret_map:
        example.com: foobar
    presence_from_facebook: false
    # Whether or not to update avatars when syncing all contacts at startup.
    update_avatar_initial_sync: true

    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to Facebook.
    delivery_receipts: false
    # Whether or not delivery errors should be reported as messages in the Matrix room.
    delivery_error_reports: true
    # Whether the bridge should send the message status as a custom com.beeper.message_send_status event.
    message_status_events: false
    # Whether to allow inviting arbitrary mxids to portal rooms
    allow_invites: false
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: true
    # Settings for backfilling messages from Facebook.
    backfill:
        # Whether or not the Facebook users of logged in Matrix users should be
        # invited to private chats when backfilling history from Facebook. This is
        # usually needed to prevent rate limits and to allow timestamp massaging.
        invite_own_puppet: true
        # Maximum number of messages to backfill initially.
        # Set to 0 to disable backfilling when creating portal.
        initial_limit: 5
        # Maximum number of messages to backfill if messages were missed while
        # the bridge was disconnected.
        # Set to 0 to disable backfilling missed messages.
        missed_limit: 1000
        # If using double puppeting, should notifications be disabled
        # while the initial backfill is in progress?
        disable_notifications: false
    periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where Facebook stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        # Set to a list of two items to randomize the interval (min, max).
        interval: -1
        # What to do in periodic reconnects. Either "refresh" or "reconnect"
        mode: refresh
        # Should even disconnected users be reconnected?
        always: false
        # Only reconnect if the user has been connected for longer than this value
        min_connected_time: 0
    # The number of seconds that a disconnection can last without triggering an automatic re-sync
    # and missed message backfilling when reconnecting.
    # Set to 0 to always re-sync, or -1 to never re-sync automatically.
    resync_max_disconnected_time: 5
    # Should the bridge do a resync on startup?
    sync_on_startup: true
    # Whether or not temporary disconnections should send notices to the notice room.
    # If this is false, disconnections will never send messages and connections will only send
    # messages if it was disconnected for more than resync_max_disconnected_time seconds.
    temporary_disconnect_notices: false
    # Disable bridge notices entirely
    disable_bridge_notices: false
    on_reconnection_fail:
        # What to do if a reconnection attempt fails? Options: reconnect, refresh, null
        action: reconnect
        # Seconds to wait before attempting to refresh the connection, set a list of two items to
        # to randomize the interval (min, max).
        wait_for: 0
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false
    # When using double puppeting, should muted chats be muted in Matrix?
    mute_bridging: true
    # Whether or not mute status and tags should only be bridged when the portal room is created.
    tag_only_on_create: true
    # If set to true, downloading media from the CDN will use a plain aiohttp client without the usual headers or
    # other configuration. This may be useful if you don't want to use the default proxy for large files.
    sandbox_media_download: false
    # URL to call to retrieve a proxy URL from (defaults to the http_proxy environment variable).
    get_proxy_api_url:

    # End-to-bridge encryption support options.
    #
    # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: false
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: false
        # Require encryption, drop any unencrypted messages.
        require: false
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow_key_sharing: false
        # What level of device verification should be required from users?
        #
        # Valid levels:
        #   unverified - Send keys to all device in the room.
        #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
        #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
        #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
        #                           Note that creating user signatures from the bridge bot is not currently possible.
        #   verified - Require manual per-device verification
        #              (currently only possible by modifying the `trust` column in the `crypto_device` database table).
        verification_levels:
            # Minimum level for which the bridge should send keys to when bridging messages from Telegram to Matrix.
            receive: unverified
            # Minimum level that the bridge should accept for incoming Matrix messages.
            send: unverified
            # Minimum level that the bridge should require for accepting key requests.
            share: cross-signed-tofu
        # Options for Megolm room key rotation. These options allow you to
        # configure the m.room.encryption event content. See:
        # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
        # more information about that event.
        rotation:
            # Enable custom Megolm room key rotation settings. Note that these
            # settings will only apply to rooms created after this option is
            # set.
            enable_custom: false
            # The maximum number of milliseconds a session should be used
            # before changing it. The Matrix spec recommends 604800000 (a week)
            # as the default.
            milliseconds: 604800000
            # The maximum number of messages that should be sent with a given a
            # session before changing it. The Matrix spec recommends 100 as the
            # default.
            messages: 100

    # Permissions for using the bridge.
    # Permitted values:
    #      relay - Allowed to be relayed through the bridge, no access to commands.
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        '*': relay
        ***REMOVED***: user
        '@eric:***REMOVED***': admin
    relay:
        # Whether relay mode should be allowed. If allowed, `!fb set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: false
        # The formats to use when sending messages to Messenger via a relay user.
        #
        # Available variables:
        #   $sender_displayname - The display name of the sender (e.g. Example User)
        #   $sender_username    - The username (Matrix ID localpart) of the sender (e.g. exampleuser)
        #   $sender_mxid        - The Matrix ID of the sender (e.g. @exampleuser:example.com)
        #   $message            - The message content
        message_formats:
            m.text: '<b>$sender_displayname</b>: $message'
            m.notice: '<b>$sender_displayname<b>: $message'
            m.emote: '* <b>$sender_displayname<b> $message'
            m.file: <b>$sender_displayname</b> sent a file
            m.image: <b>$sender_displayname</b> sent an image
            m.audio: <b>$sender_displayname</b> sent an audio file
            m.video: <b>$sender_displayname</b> sent a video
            m.location: <b>$sender_displayname</b> sent a location

facebook:
    device_seed: {{ fb_bridge_device_seed }} 
    default_region_hint: ODN
    connection_type: WIFI
    carrier: Verizon
    hni: 311390

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): mautrix_facebook.util.ColorFormatter
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
        normal:
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
    handlers:
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        maufbapi:
            level: DEBUG
        paho:
            level: INFO
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [console]
