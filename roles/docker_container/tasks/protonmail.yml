---
# tasks file to start protonmail container
- name: "Synchronize docker image resources"
  synchronize: src=docker/protonmail dest={{ protonmail_docker_dir }}
  register: protonmail_sync

# - name: "Build protonmail login image"
#   shell: "docker build -t protonmail-login docker/protonmail"
#   when: protonmail_sync.changed

- name: "Login to protonmail bridge"
  docker_container:
    name: protonmail-login
    image: protonmail-login:latest
    command: /root/login.sh {{ protonmail_username }} {{ protonmail_password }}
    detach: no
  register: local_smtp_password
  when: protonmail_sync.changed

- name: "Save protonmail password"
  copy:
    content: "{{ local_smtp_password.container.Output }}"
    dest: "{{ local_credential_store }}/protonmail_local_password"
  when: protonmail_sync.changed

- name: "Create logged in image"
  shell: "docker commit protonmail-login protonmail"
  when: protonmail_sync.changed

- name: "Remove protonmail login container"
  docker_container:
    state: absent
    name: protonmail-login

- name: "Set protonmail password fact"
  set_fact:
    protonmail_local_password: "{{ lookup('file', '{{ local_credential_store }}/protonmail_local_password') }}"

- name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} protonmail container"
  docker_container:
    name: protonmail
    image: protonmail:latest
    command: hydroxide -smtp-host protonmail smtp
    restart_policy: always
    tty: yes
    networks:
      - name: backend
    networks_cli_compatible: true
    state: "{{ state | default('started') }}"
